{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":408,"sourceType":"datasetVersion","datasetId":180,"isSourceIdPinned":false}],"dockerImageVersionId":31040,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# **Downloading Breast Cancer Dataset**","metadata":{"_uuid":"cb654726-8c71-44d5-a8a6-08f3eb63e4f8","_cell_guid":"fc038fd3-e27c-4aa8-a89a-d7370259f220","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"import kagglehub\n\n# Download latest version\npath = kagglehub.dataset_download(\"uciml/breast-cancer-wisconsin-data\")\n\nprint(\"Path to dataset files:\", path)","metadata":{"_uuid":"3ca5d2d9-cf92-4bec-972b-125a8506f2eb","_cell_guid":"678edc13-b1f5-49bd-86a8-933e1094c618","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T20:46:28.667823Z","iopub.execute_input":"2025-06-13T20:46:28.668111Z","iopub.status.idle":"2025-06-13T20:46:29.177271Z","shell.execute_reply.started":"2025-06-13T20:46:28.668090Z","shell.execute_reply":"2025-06-13T20:46:29.176341Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# **Import Modules for Analysis**","metadata":{"_uuid":"52b4dbb6-c8ff-4591-a8dc-6f7a5dd01283","_cell_guid":"1944f89d-2fb1-450b-bcdf-58b98ef7019e","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"markdown","source":"","metadata":{"_uuid":"0c981446-3154-41a4-9c8c-22637e5ae10e","_cell_guid":"b90462b8-a041-4d4a-a295-35bb136102d3","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"#Import modules for analysis\n\nimport numpy as np\nimport pandas as pd \nimport math \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy\nimport scipy.spatial \nfrom collections import Counter\nimport warnings\nwarnings.filterwarnings('ignore')","metadata":{"_uuid":"dca8d3d0-adbf-4a6a-ad83-83186abc07d9","_cell_guid":"965cbbe1-6347-4567-b64d-14691fc94744","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T20:46:29.178817Z","iopub.execute_input":"2025-06-13T20:46:29.179093Z","iopub.status.idle":"2025-06-13T20:46:33.355501Z","shell.execute_reply.started":"2025-06-13T20:46:29.179071Z","shell.execute_reply":"2025-06-13T20:46:33.354629Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# **Reading Breast Cencer Dataset**","metadata":{"_uuid":"321d2c60-f016-44ff-82e6-8ba322dca8b1","_cell_guid":"1ffd403c-c452-492f-8564-024b4afb2290","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"data = pd.read_csv('/kaggle/input/breast-cancer-wisconsin-data/data.csv')","metadata":{"_uuid":"451afce3-0624-4fd2-a8cf-7b04388f5a28","_cell_guid":"d6d58b49-4b34-4827-95a0-9f6f7c7e8b4e","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T20:46:33.356354Z","iopub.execute_input":"2025-06-13T20:46:33.356774Z","iopub.status.idle":"2025-06-13T20:46:33.384776Z","shell.execute_reply.started":"2025-06-13T20:46:33.356752Z","shell.execute_reply":"2025-06-13T20:46:33.383832Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Printing Dataset Dimensions\nprint(data.shape)","metadata":{"_uuid":"fda258d9-cb71-44ae-a0ee-316ba72d4c03","_cell_guid":"268d38f6-126b-490d-bc96-a7cfa7207b0c","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T20:46:33.385745Z","iopub.execute_input":"2025-06-13T20:46:33.386040Z","iopub.status.idle":"2025-06-13T20:46:33.391032Z","shell.execute_reply.started":"2025-06-13T20:46:33.386009Z","shell.execute_reply":"2025-06-13T20:46:33.389961Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Print the first 5 rows of the dataset\ndata.head()","metadata":{"_uuid":"ec9363f0-5758-477e-8ca3-13e46f01f939","_cell_guid":"20a0962f-6734-4285-b191-98545d384233","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T20:46:33.393218Z","iopub.execute_input":"2025-06-13T20:46:33.393941Z","iopub.status.idle":"2025-06-13T20:46:33.450124Z","shell.execute_reply.started":"2025-06-13T20:46:33.393918Z","shell.execute_reply":"2025-06-13T20:46:33.449321Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Inspect data types\nprint(data.dtypes)","metadata":{"_uuid":"60e414d2-904e-4d45-9fbb-1b0e9eca72c7","_cell_guid":"df58012e-47d0-4479-985c-35bc9fa2be50","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T20:46:33.451176Z","iopub.execute_input":"2025-06-13T20:46:33.451518Z","iopub.status.idle":"2025-06-13T20:46:33.457469Z","shell.execute_reply.started":"2025-06-13T20:46:33.451490Z","shell.execute_reply":"2025-06-13T20:46:33.456573Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Check for missing values\nprint(data.isnull().sum())","metadata":{"_uuid":"8f317502-15ad-427a-95db-127f34921204","_cell_guid":"79f0cc90-f7b9-417c-a02a-d37209bf291b","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T20:46:33.458305Z","iopub.execute_input":"2025-06-13T20:46:33.458558Z","iopub.status.idle":"2025-06-13T20:46:33.480404Z","shell.execute_reply.started":"2025-06-13T20:46:33.458539Z","shell.execute_reply":"2025-06-13T20:46:33.479118Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Types of Cancer: Malignant and Benign\nprint(data[\"diagnosis\"].unique())","metadata":{"_uuid":"55d3fbf0-9345-4529-9365-1fb59a98ea29","_cell_guid":"11ac7fea-848e-483a-943e-f04f24a17acd","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T20:46:33.481342Z","iopub.execute_input":"2025-06-13T20:46:33.481641Z","iopub.status.idle":"2025-06-13T20:46:33.504553Z","shell.execute_reply.started":"2025-06-13T20:46:33.481617Z","shell.execute_reply":"2025-06-13T20:46:33.503602Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Calculating the proportions of cases we have in each cancer type\nprint(data[\"diagnosis\"].value_counts()/data.shape[0])","metadata":{"_uuid":"34655f89-9e97-4e67-8a16-c32e8dec03c0","_cell_guid":"42753d10-42a0-49d6-869e-95c73f0b7086","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T20:46:33.505741Z","iopub.execute_input":"2025-06-13T20:46:33.506074Z","iopub.status.idle":"2025-06-13T20:46:33.528578Z","shell.execute_reply.started":"2025-06-13T20:46:33.506052Z","shell.execute_reply":"2025-06-13T20:46:33.527590Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# **Cleaning Data**","metadata":{"_uuid":"c35d9675-facc-44cb-b7fc-c95bee1e74aa","_cell_guid":"9da4b0de-c0d2-4d25-87b4-ec93b31a4161","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"data.head()","metadata":{"_uuid":"cf6a820d-2117-468b-9f8e-06d8f6e620d1","_cell_guid":"c2bfbff8-7552-40e8-b8d9-8a84c8a98be6","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T20:46:33.529498Z","iopub.execute_input":"2025-06-13T20:46:33.529757Z","iopub.status.idle":"2025-06-13T20:46:33.566618Z","shell.execute_reply.started":"2025-06-13T20:46:33.529739Z","shell.execute_reply":"2025-06-13T20:46:33.565589Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Dropping the ID and Unnamed: 32 columns as they are not needed for analysis\n\ndata.drop (['id', 'Unnamed: 32'], axis = 1, inplace = True)","metadata":{"_uuid":"883e0d2a-4b44-4ad0-9f9c-9a67786467eb","_cell_guid":"40181fa8-7648-467d-acf5-ec36df54e8ab","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T20:46:33.567613Z","iopub.execute_input":"2025-06-13T20:46:33.567875Z","iopub.status.idle":"2025-06-13T20:46:33.591881Z","shell.execute_reply.started":"2025-06-13T20:46:33.567855Z","shell.execute_reply":"2025-06-13T20:46:33.590773Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data.head()","metadata":{"_uuid":"dceb5bc4-a04e-47c8-a767-af85c6ef6e9c","_cell_guid":"e677b526-a34f-4393-9370-0f7628cf0ad9","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T20:46:33.592974Z","iopub.execute_input":"2025-06-13T20:46:33.593288Z","iopub.status.idle":"2025-06-13T20:46:33.632228Z","shell.execute_reply.started":"2025-06-13T20:46:33.593260Z","shell.execute_reply":"2025-06-13T20:46:33.631205Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Encoding the diagnosis column to 0 and 1 where 0 is Benign and 1 is Malignant\nif data.diagnosis[0]==\"M\" or data.diagnosis[0]==\"B\":\n    data.diagnosis = [1 if each == \"M\" else 0 for each in data.diagnosis]","metadata":{"_uuid":"35aebb8a-6319-43ee-95db-6b3b16dbe69a","_cell_guid":"fe72c38d-75ac-499d-91ad-478edf181590","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T20:46:33.633642Z","iopub.execute_input":"2025-06-13T20:46:33.633883Z","iopub.status.idle":"2025-06-13T20:46:33.651317Z","shell.execute_reply.started":"2025-06-13T20:46:33.633865Z","shell.execute_reply":"2025-06-13T20:46:33.650262Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data.head()","metadata":{"_uuid":"9c800546-3a52-4d90-9b27-4009c5a8de8f","_cell_guid":"e16a4a0c-0730-4a9f-a8b4-c5f795f226c2","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T20:46:33.654189Z","iopub.execute_input":"2025-06-13T20:46:33.654500Z","iopub.status.idle":"2025-06-13T20:46:33.692064Z","shell.execute_reply.started":"2025-06-13T20:46:33.654480Z","shell.execute_reply":"2025-06-13T20:46:33.691071Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Plotting the distribution of the diagnosis column to see the proportion of Malignant and Benign cases\nsns.scatterplot(x='area_mean',y='smoothness_mean',hue='diagnosis',data=data)","metadata":{"_uuid":"55804df2-471c-4a27-b2b1-02d9fd268b0e","_cell_guid":"2461a796-fcdb-468e-8884-079de2a0d40d","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T20:46:33.693361Z","iopub.execute_input":"2025-06-13T20:46:33.693852Z","iopub.status.idle":"2025-06-13T20:46:34.120393Z","shell.execute_reply.started":"2025-06-13T20:46:33.693823Z","shell.execute_reply":"2025-06-13T20:46:34.119347Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"y = data.diagnosis.values\nx_data = data.drop([\"diagnosis\"], axis=1)","metadata":{"_uuid":"81929192-d05c-4f27-9809-bdc86d8d060b","_cell_guid":"6d590dd6-bc3d-4429-90fb-eb9911b47d31","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T20:46:34.121691Z","iopub.execute_input":"2025-06-13T20:46:34.122027Z","iopub.status.idle":"2025-06-13T20:46:34.127744Z","shell.execute_reply.started":"2025-06-13T20:46:34.121993Z","shell.execute_reply":"2025-06-13T20:46:34.126712Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# **Normalising the Data**","metadata":{"_uuid":"1b5df368-35b7-4798-927a-a17655f42400","_cell_guid":"02deb34f-aa8a-4a49-9d4a-e476dae945c1","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"x = (x_data - x_data.min()) / (x_data.max() - x_data.min())","metadata":{"_uuid":"99fcb34e-0475-4b57-9c52-bc921590ed36","_cell_guid":"a6aebdf5-c607-4fb3-ba95-c777828571dd","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T20:46:34.129089Z","iopub.execute_input":"2025-06-13T20:46:34.129406Z","iopub.status.idle":"2025-06-13T20:46:34.161428Z","shell.execute_reply.started":"2025-06-13T20:46:34.129356Z","shell.execute_reply":"2025-06-13T20:46:34.160100Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data.describe().T","metadata":{"_uuid":"604f0452-68aa-4ad6-aeff-fab8df7b2dcc","_cell_guid":"9c9c6d72-5b5a-4087-8328-77d31cc7a357","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T20:46:34.162516Z","iopub.execute_input":"2025-06-13T20:46:34.162788Z","iopub.status.idle":"2025-06-13T20:46:34.225618Z","shell.execute_reply.started":"2025-06-13T20:46:34.162768Z","shell.execute_reply":"2025-06-13T20:46:34.224748Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Import plotting modules\nfrom plotly import tools\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot \nimport plotly.offline as py\nfrom plotly.graph_objs import Scatter, Layout \npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff","metadata":{"_uuid":"f98e3d98-d4a3-43ba-89c5-5a6565e98de6","_cell_guid":"181a7e9d-3dfa-4031-a26b-e4ea9a10d715","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T20:46:34.227038Z","iopub.execute_input":"2025-06-13T20:46:34.227329Z","iopub.status.idle":"2025-06-13T20:46:36.814094Z","shell.execute_reply.started":"2025-06-13T20:46:34.227309Z","shell.execute_reply":"2025-06-13T20:46:36.813111Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"p = data.describe().T \np = p.round(4) \ntable = go.Table(\n    columnwidth=[0.8]+[0.5]*8, \n    header=dict(\n        values=['Attribute'] + list(p.columns), line = dict(color='#506784'),\n        fill = dict(color='lightblue'),\n), \n    cells=dict(\n        values=[p.index] + [p[k].tolist() for k in p.columns[:]], line = dict(color='#506784'),\n        fill = dict(color=['rgb(173, 216, 220)', '#f5f5fa'])\n) )","metadata":{"_uuid":"977b46e9-7462-4de5-82aa-5ac38edca1f5","_cell_guid":"5876e6a4-d1d0-42c9-896f-fea47d0098ea","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T20:59:11.826450Z","iopub.execute_input":"2025-06-13T20:59:11.826770Z","iopub.status.idle":"2025-06-13T20:59:11.882253Z","shell.execute_reply.started":"2025-06-13T20:59:11.826747Z","shell.execute_reply":"2025-06-13T20:59:11.881424Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"B, M = data['diagnosis'].value_counts()      # unpack the two counts\ns = [B, M]\n\nprint(data['diagnosis'].value_counts())      # use the same variable name\n\nwith plt.style.context('dark_background'):\n    plt.figure(figsize=(6, 4))\n    plt.bar([0, 1], s, align='center', label='Count')\n    plt.xticks([0, 1], ['Benign', 'Malignant'])  # optional: nicer x-labels\n    plt.ylabel('')\n    plt.xlabel('')\n    plt.legend(loc='best')\n    plt.tight_layout()","metadata":{"_uuid":"380b2b2d-383b-4f8e-b9fa-c3e6c86bac48","_cell_guid":"72543fe8-36be-4822-8f14-c1d0e7e6fbc0","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T20:59:13.965189Z","iopub.execute_input":"2025-06-13T20:59:13.965545Z","iopub.status.idle":"2025-06-13T20:59:14.143114Z","shell.execute_reply.started":"2025-06-13T20:59:13.965508Z","shell.execute_reply":"2025-06-13T20:59:14.142174Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"B, M = data['diagnosis'].value_counts()\ntrace1 = go.Bar(y = (M, B), x = ['malignant', 'benign'],opacity = 0.8)\ntrace2 = go.Pie(labels = ['Benign','Malignant'], values = data['diagnosis'].value_counts(), textfont=dict(size=15), opacity = 0.8)","metadata":{"_uuid":"4cb4a096-8aa6-4c81-92c3-f77bb9b18485","_cell_guid":"1b4e0864-7d69-4f20-892e-88122d646f6c","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T20:59:24.745764Z","iopub.execute_input":"2025-06-13T20:59:24.746144Z","iopub.status.idle":"2025-06-13T20:59:24.753536Z","shell.execute_reply.started":"2025-06-13T20:59:24.746119Z","shell.execute_reply":"2025-06-13T20:59:24.752471Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"mean_col = [col for col in data.columns if col.endswith('_mean')] \nfor i in range(len(mean_col)):\n    sns.FacetGrid(data,hue=\"diagnosis\",aspect=3,margin_titles=True).map(sns.kdeplot,mean_col[i],shade= True).add_legend()","metadata":{"_uuid":"6095ce89-90c4-47bc-81a7-e36a611a3f2b","_cell_guid":"001fc008-7e9e-438c-923e-d2070ddd8b40","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T20:59:57.038020Z","iopub.execute_input":"2025-06-13T20:59:57.038785Z","iopub.status.idle":"2025-06-13T21:00:01.419155Z","shell.execute_reply.started":"2025-06-13T20:59:57.038755Z","shell.execute_reply":"2025-06-13T21:00:01.418074Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Correlation Map\nf,ax = plt.subplots(figsize=(18, 18))\ncmap = sns.diverging_palette( 240 , 10 , as_cmap = True ) \nsns.heatmap(data.corr(), cmap='Blues',annot=True, linewidths=.5, fmt= '.1f',ax=ax) \nplt.xticks(fontsize=11,rotation=70)\nplt.show()","metadata":{"_uuid":"69964544-b165-411a-b44f-98b69263c3a1","_cell_guid":"e1b11a68-3498-4995-94f6-ff17d59974d7","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T21:00:22.203643Z","iopub.execute_input":"2025-06-13T21:00:22.204014Z","iopub.status.idle":"2025-06-13T21:00:24.432356Z","shell.execute_reply.started":"2025-06-13T21:00:22.203992Z","shell.execute_reply":"2025-06-13T21:00:24.431291Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from pylab import rcParams \nrcParams['figure.figsize'] = 8,5\n\ncols = ['radius_mean', 'texture_mean', 'perimeter_mean',\n'area_mean', 'smoothness_mean', 'compactness_mean', 'concavity_mean', 'concave points_mean', 'symmetry_mean','diagnosis']\nsns_plot = sns.pairplot(data=data[cols],hue='diagnosis')","metadata":{"_uuid":"1f6e42a9-a1e1-48fe-8cac-eef1f674abcb","_cell_guid":"2fbf42c6-ee28-47f5-aec1-544b70d21810","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T21:00:37.558162Z","iopub.execute_input":"2025-06-13T21:00:37.558516Z","iopub.status.idle":"2025-06-13T21:01:06.684987Z","shell.execute_reply.started":"2025-06-13T21:00:37.558490Z","shell.execute_reply":"2025-06-13T21:01:06.683970Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# **Splitting the data into train and test sets**","metadata":{"_uuid":"72bbb781-44a8-466c-a363-be58b2044eb6","_cell_guid":"222266b5-3da6-463e-b2fd-ed112490a2b1","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"# X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.30, random_state=42) #30% of data is kept for testing\n\n# Shuffle the dataset \n# shuffle_df = shuffle(data)\n# np.random.shuffle(shuffle_df.values)\n\nshuffle_df = data.sample(frac=1)\n\n# Define a size for the train set \ntrain_size = int(0.8 * len(data))\n\n# Splitting the dataset \ntrain_set = shuffle_df[:train_size]\ntest_set = shuffle_df[train_size:]\n\ny_train = train_set.diagnosis.values\nX_train = train_set.drop([\"diagnosis\"], axis=1)\ny_test  = test_set.diagnosis.values\nX_test  = test_set.drop([\"diagnosis\"], axis=1)","metadata":{"_uuid":"14aa6b80-3881-4930-aec4-0b3f8684c396","_cell_guid":"cc0d6bbd-e244-4de1-84b1-635385a56d2a","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T21:02:14.516163Z","iopub.execute_input":"2025-06-13T21:02:14.516523Z","iopub.status.idle":"2025-06-13T21:02:14.526519Z","shell.execute_reply.started":"2025-06-13T21:02:14.516496Z","shell.execute_reply":"2025-06-13T21:02:14.525269Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# **Building K-Nearest Neighbours for Classification without Sklearn Modules**","metadata":{"_uuid":"87199d87-858d-4921-8180-4bbaa326bfc0","_cell_guid":"47ea1812-492c-42e4-b67f-ab8196931df1","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"class KNN:\n    def __init__(self, k):\n        self.k = k\n        \n    #Fit function to keep the data with itself, since KNN does not perform any explicit training process.   \n    def fit(self, X, y):\n        self.X_train = X\n        self.y_train = y\n        \n        \n     #It calculate the Euclidean distance and returns how similar two examples are  \n    def distance(self, X1, X2):\n        distance = scipy.spatial.distance.euclidean(X1, X2)\n        \n        \n    # In predict function, it predicts the class for testing instance using the complete training data.\n    #  1- First it calculates the distance between a test data point and every training data point,\n    #  2- It sorts the distances and picks K nearest distances(first K entries) from it.\n    #  3- Gets the labels of the selected K neighbors. The most common label(label with a majority vote) will be the\n    #     predicted label for our test data point.\n    def predict(self, X_test):\n        final_output = []\n        for i in range(len(X_test)):\n            d = []\n            votes = []\n            for j in range(len(self.X_train)):\n                dist = scipy.spatial.distance.euclidean(self.X_train[j] , X_test[i])\n                d.append([dist, j])\n            d.sort()\n            d = d[0:self.k]\n            for d, j in d:\n                votes.append(self.y_train[j])\n            ans = Counter(votes).most_common(1)[0][0]\n            final_output.append(ans)\n            \n        return final_output\n    \n    # It calculate the score for our model based on the test data\n    def score(self, X_test, y_test):\n        predictions = self.predict(X_test)\n        return (predictions == y_test).sum() / len(y_test)","metadata":{"_uuid":"58bf0075-da86-4395-ba0f-d6f67d82ea12","_cell_guid":"94a84c36-ea69-4716-9e94-cb66486a3a0e","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T21:02:48.140458Z","iopub.execute_input":"2025-06-13T21:02:48.140776Z","iopub.status.idle":"2025-06-13T21:02:48.149163Z","shell.execute_reply.started":"2025-06-13T21:02:48.140754Z","shell.execute_reply":"2025-06-13T21:02:48.148103Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Store neighbours and errors in an empty list\nneighbours = []\nerrors = []","metadata":{"_uuid":"fc1338b1-9729-4f5d-8350-32812bbfc0de","_cell_guid":"af88af3f-fc05-4d7c-a649-3eebabb5c2be","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T21:02:58.380947Z","iopub.execute_input":"2025-06-13T21:02:58.381280Z","iopub.status.idle":"2025-06-13T21:02:58.386348Z","shell.execute_reply.started":"2025-06-13T21:02:58.381255Z","shell.execute_reply":"2025-06-13T21:02:58.385220Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"for k in range(1,30, 2):\n    neighbours.append(k)\n    clf = KNN(k)\n    clf.fit(X_train.to_numpy(), y_train)\n    score = clf.score(X_test.to_numpy(), y_test)\n    errors.append(1-score)\n    print(\"Number of neighbours : \",k,\", Accuracy = \",score)","metadata":{"_uuid":"a0151983-4b48-44d6-a42d-c53781d3ab86","_cell_guid":"1188ed4c-e20c-4e25-bb8d-02b2d428baef","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T21:03:06.367020Z","iopub.execute_input":"2025-06-13T21:03:06.367334Z","iopub.status.idle":"2025-06-13T21:03:12.505413Z","shell.execute_reply.started":"2025-06-13T21:03:06.367313Z","shell.execute_reply":"2025-06-13T21:03:12.504545Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"clf = KNN(9)\nclf.fit(X_train.to_numpy(), y_train)\nscore = clf.score(X_test.to_numpy(), y_test)\nprint(\"Accuracy of KNN = \",score)","metadata":{"_uuid":"281d4c6a-097f-4e04-b917-9bcc7c675e22","_cell_guid":"fc15b00b-534c-4d4a-b4be-0c0f616ad6e7","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T21:03:24.447567Z","iopub.execute_input":"2025-06-13T21:03:24.447918Z","iopub.status.idle":"2025-06-13T21:03:24.860112Z","shell.execute_reply.started":"2025-06-13T21:03:24.447896Z","shell.execute_reply":"2025-06-13T21:03:24.859348Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Choosing the value of K which gave the least error\nMSE = [x for x in errors]\noptimal_k = neighbours[MSE.index(min(MSE))]\nprint(\"Optimal K value is: \"+str(optimal_k))\nprint(\"Accuracy at K=\"+str(optimal_k)+\" is: \"+str(1-float(MSE[optimal_k])))","metadata":{"_uuid":"cd310fd1-7f28-41cd-8dcb-83cd5c0c9bb9","_cell_guid":"bf805002-8903-4692-bc48-24e7e140f9c9","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T21:03:36.252702Z","iopub.execute_input":"2025-06-13T21:03:36.252996Z","iopub.status.idle":"2025-06-13T21:03:36.259000Z","shell.execute_reply.started":"2025-06-13T21:03:36.252977Z","shell.execute_reply":"2025-06-13T21:03:36.257961Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Plotting the error values against K values\nplt.figure(figsize=(10, 6))\nplt.plot(neighbours, MSE)\nplt.xlabel('K value --->')\nplt.ylabel('Error  --->')\nplt.show()","metadata":{"_uuid":"6ea8786d-7743-4d1f-8176-209511c976a4","_cell_guid":"8b255b94-0120-432b-82b2-717e866a621b","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T21:03:46.132929Z","iopub.execute_input":"2025-06-13T21:03:46.133245Z","iopub.status.idle":"2025-06-13T21:03:46.310957Z","shell.execute_reply.started":"2025-06-13T21:03:46.133223Z","shell.execute_reply":"2025-06-13T21:03:46.309993Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"%%writefile app.py\nimport streamlit as st, joblib, numpy as np\nfrom pathlib import Path\n\n# ---------- constants ----------\nMODEL_PATH = Path(\"breast_cancer_clf.pkl\")   # put your model here\nTEST_ACCURACY = 0.971                        # update with your own score\n\n# ---------- load model ----------\n@st.cache_resource\ndef load_model(path: Path):\n    if not path.exists():\n        st.error(f\"❌ Model file not found: {path.resolve()}\")\n        st.stop()\n    return joblib.load(path)\n\nmodel = load_model(MODEL_PATH)\n\n# ---------- UI ----------\nst.set_page_config(page_title=\"Breast-Tumor Classifier\", page_icon=\"🩺\")\nst.title(\"Breast-tumor classifier\")\nst.caption(f\"Hold-out test accuracy: **{TEST_ACCURACY:.1%}**\")\n\nst.markdown(\"Enter feature measurements below (values from the Wisconsin Diagnostic dataset).\")\n\n# For brevity only a few inputs are shown—repeat for all features you want:\nradius_mean  = st.number_input(\"Mean radius (mm)\",  0.0,  50.0, step=0.01)\ntexture_mean = st.number_input(\"Mean texture\",      0.0, 100.0, step=0.01)\nperimeter_mean = st.number_input(\"Mean perimeter\",  0.0, 300.0, step=0.01)\narea_mean    = st.number_input(\"Mean area\",         0.0, 2500.0, step=1.0)\n\nif st.button(\"Classify\"):\n    # assemble feature vector in the order the model expects\n    X = np.array([[radius_mean, texture_mean, perimeter_mean, area_mean]])\n    prob_malignant = model.predict_proba(X)[0, 1]\n    label = \"Malignant\" if prob_malignant >= 0.50 else \"Benign\"\n\n    st.success(f\"**{label}**  (Probability malignant: {prob_malignant:.1%})\")\n    st.caption(\"_For research use only – not a diagnostic device._\")","metadata":{"_uuid":"1a78c4d1-2468-49dc-87da-b471b5625b36","_cell_guid":"60a2e91e-8018-4939-97ea-17189df0cec7","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T21:12:33.382566Z","iopub.execute_input":"2025-06-13T21:12:33.382916Z","iopub.status.idle":"2025-06-13T21:12:33.391360Z","shell.execute_reply.started":"2025-06-13T21:12:33.382887Z","shell.execute_reply":"2025-06-13T21:12:33.390353Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null}]}
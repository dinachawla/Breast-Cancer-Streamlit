{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":408,"sourceType":"datasetVersion","datasetId":180,"isSourceIdPinned":false}],"dockerImageVersionId":31040,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# **Downloading Breast Cancer Dataset**","metadata":{"_uuid":"d5bca41b-c5e8-4a38-95ff-347202a2ccc9","_cell_guid":"af7d02b8-336a-4a43-b7c9-21851ffa6f05","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"import kagglehub\n\n# Download latest version\npath = kagglehub.dataset_download(\"uciml/breast-cancer-wisconsin-data\")\n\nprint(\"Path to dataset files:\", path)","metadata":{"_uuid":"13acf4a1-53fb-4e1e-84a4-f59c7346999b","_cell_guid":"963a3c5a-7f65-4de5-80f4-494a9babf5b4","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T20:46:28.667823Z","iopub.execute_input":"2025-06-13T20:46:28.668111Z","iopub.status.idle":"2025-06-13T20:46:29.177271Z","shell.execute_reply.started":"2025-06-13T20:46:28.668090Z","shell.execute_reply":"2025-06-13T20:46:29.176341Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# **Import Modules for Analysis**","metadata":{"_uuid":"dc2af9a7-3f5f-46da-83bd-1b4745c93387","_cell_guid":"d757c2a8-d444-404f-ac65-ec3d4e250f0a","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"markdown","source":"","metadata":{"_uuid":"2c8dc19e-c222-4bf6-9efc-abbbb8482ed3","_cell_guid":"f5fe715b-bfde-448d-96ae-88d79019ad52","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"#Import modules for analysis\n\nimport numpy as np\nimport pandas as pd \nimport math \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy\nimport scipy.spatial \nfrom collections import Counter\nimport warnings\nwarnings.filterwarnings('ignore')","metadata":{"_uuid":"d7d18824-bfe9-4101-93d9-608105898199","_cell_guid":"8c31f6a8-1d9f-4a0b-b424-1106a37ff7b6","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T20:46:29.178817Z","iopub.execute_input":"2025-06-13T20:46:29.179093Z","iopub.status.idle":"2025-06-13T20:46:33.355501Z","shell.execute_reply.started":"2025-06-13T20:46:29.179071Z","shell.execute_reply":"2025-06-13T20:46:33.354629Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# **Reading Breast Cencer Dataset**","metadata":{"_uuid":"a03a9a0c-816c-4e7b-863e-b71e6ec9a369","_cell_guid":"a7a023ce-d486-4592-a70d-d3823635aedd","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"data = pd.read_csv('/kaggle/input/breast-cancer-wisconsin-data/data.csv')","metadata":{"_uuid":"ffd6a555-31a1-4f38-af6d-572829035e29","_cell_guid":"33df1656-fc74-47b7-a7eb-d384ad9ce165","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T20:46:33.356354Z","iopub.execute_input":"2025-06-13T20:46:33.356774Z","iopub.status.idle":"2025-06-13T20:46:33.384776Z","shell.execute_reply.started":"2025-06-13T20:46:33.356752Z","shell.execute_reply":"2025-06-13T20:46:33.383832Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Printing Dataset Dimensions\nprint(data.shape)","metadata":{"_uuid":"be2ddad5-5bc1-4e36-9bf8-f14f2e7e7efa","_cell_guid":"936c3ad2-a076-4330-93bc-3263b9ec0a5d","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T20:46:33.385745Z","iopub.execute_input":"2025-06-13T20:46:33.386040Z","iopub.status.idle":"2025-06-13T20:46:33.391032Z","shell.execute_reply.started":"2025-06-13T20:46:33.386009Z","shell.execute_reply":"2025-06-13T20:46:33.389961Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Print the first 5 rows of the dataset\ndata.head()","metadata":{"_uuid":"851d5a1a-a1a4-4e61-9518-11ae85a891b0","_cell_guid":"48578374-07dd-4ecb-8bc8-3654e452aad0","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T20:46:33.393218Z","iopub.execute_input":"2025-06-13T20:46:33.393941Z","iopub.status.idle":"2025-06-13T20:46:33.450124Z","shell.execute_reply.started":"2025-06-13T20:46:33.393918Z","shell.execute_reply":"2025-06-13T20:46:33.449321Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Inspect data types\nprint(data.dtypes)","metadata":{"_uuid":"4f5002d9-faed-4ff3-82a8-ba6e062c98c9","_cell_guid":"c006cd98-c86a-48b6-aee1-06dfecdabcc2","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T20:46:33.451176Z","iopub.execute_input":"2025-06-13T20:46:33.451518Z","iopub.status.idle":"2025-06-13T20:46:33.457469Z","shell.execute_reply.started":"2025-06-13T20:46:33.451490Z","shell.execute_reply":"2025-06-13T20:46:33.456573Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Check for missing values\nprint(data.isnull().sum())","metadata":{"_uuid":"f9aff013-0186-45be-bceb-fff530ac66fc","_cell_guid":"d3fa5b65-f2ae-4337-80a2-0152e0aac30f","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T20:46:33.458305Z","iopub.execute_input":"2025-06-13T20:46:33.458558Z","iopub.status.idle":"2025-06-13T20:46:33.480404Z","shell.execute_reply.started":"2025-06-13T20:46:33.458539Z","shell.execute_reply":"2025-06-13T20:46:33.479118Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Types of Cancer: Malignant and Benign\nprint(data[\"diagnosis\"].unique())","metadata":{"_uuid":"523e9f4f-37ad-4fe2-82b6-60be95f85b9d","_cell_guid":"e2e8aab5-eda6-420c-bc83-c66fa339a432","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T20:46:33.481342Z","iopub.execute_input":"2025-06-13T20:46:33.481641Z","iopub.status.idle":"2025-06-13T20:46:33.504553Z","shell.execute_reply.started":"2025-06-13T20:46:33.481617Z","shell.execute_reply":"2025-06-13T20:46:33.503602Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Calculating the proportions of cases we have in each cancer type\nprint(data[\"diagnosis\"].value_counts()/data.shape[0])","metadata":{"_uuid":"2fd185aa-e5d5-40df-97cd-19bb4e14b81b","_cell_guid":"e03b79a7-a87b-4fc5-a841-36f3e0f81997","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T20:46:33.505741Z","iopub.execute_input":"2025-06-13T20:46:33.506074Z","iopub.status.idle":"2025-06-13T20:46:33.528578Z","shell.execute_reply.started":"2025-06-13T20:46:33.506052Z","shell.execute_reply":"2025-06-13T20:46:33.527590Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# **Cleaning Data**","metadata":{"_uuid":"55138eaa-2385-478e-956f-ccba38e227d1","_cell_guid":"75ad1722-cee5-4b03-9c15-b162e4cb0ac6","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"data.head()","metadata":{"_uuid":"a8430676-21a9-4b0c-97d6-016950ef9667","_cell_guid":"0c5510a4-d851-456a-9626-34159c286898","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T20:46:33.529498Z","iopub.execute_input":"2025-06-13T20:46:33.529757Z","iopub.status.idle":"2025-06-13T20:46:33.566618Z","shell.execute_reply.started":"2025-06-13T20:46:33.529739Z","shell.execute_reply":"2025-06-13T20:46:33.565589Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Dropping the ID and Unnamed: 32 columns as they are not needed for analysis\n\ndata.drop (['id', 'Unnamed: 32'], axis = 1, inplace = True)","metadata":{"_uuid":"7b7c35fe-b7d1-4a9e-8da2-16e1ee02fad0","_cell_guid":"77cda0ce-b7ea-4228-aa93-8945903ff75a","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T20:46:33.567613Z","iopub.execute_input":"2025-06-13T20:46:33.567875Z","iopub.status.idle":"2025-06-13T20:46:33.591881Z","shell.execute_reply.started":"2025-06-13T20:46:33.567855Z","shell.execute_reply":"2025-06-13T20:46:33.590773Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data.head()","metadata":{"_uuid":"8eb314ec-056b-42f7-9ae6-55a34163c2ef","_cell_guid":"b5048127-f0f3-416f-8dad-94cb2051224a","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T20:46:33.592974Z","iopub.execute_input":"2025-06-13T20:46:33.593288Z","iopub.status.idle":"2025-06-13T20:46:33.632228Z","shell.execute_reply.started":"2025-06-13T20:46:33.593260Z","shell.execute_reply":"2025-06-13T20:46:33.631205Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Encoding the diagnosis column to 0 and 1 where 0 is Benign and 1 is Malignant\nif data.diagnosis[0]==\"M\" or data.diagnosis[0]==\"B\":\n    data.diagnosis = [1 if each == \"M\" else 0 for each in data.diagnosis]","metadata":{"_uuid":"0ea828a6-4ebd-46d8-a649-84c6d30ab44e","_cell_guid":"1c8e7e81-33eb-4155-9d44-32adc84f48e2","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T20:46:33.633642Z","iopub.execute_input":"2025-06-13T20:46:33.633883Z","iopub.status.idle":"2025-06-13T20:46:33.651317Z","shell.execute_reply.started":"2025-06-13T20:46:33.633865Z","shell.execute_reply":"2025-06-13T20:46:33.650262Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data.head()","metadata":{"_uuid":"7fb572cc-e848-4c22-adc7-5fd2b1deb637","_cell_guid":"87a2de6b-aeab-406f-b3d2-f83576d01a67","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T20:46:33.654189Z","iopub.execute_input":"2025-06-13T20:46:33.654500Z","iopub.status.idle":"2025-06-13T20:46:33.692064Z","shell.execute_reply.started":"2025-06-13T20:46:33.654480Z","shell.execute_reply":"2025-06-13T20:46:33.691071Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Plotting the distribution of the diagnosis column to see the proportion of Malignant and Benign cases\nsns.scatterplot(x='area_mean',y='smoothness_mean',hue='diagnosis',data=data)","metadata":{"_uuid":"af637c6b-de4f-4b16-b5b2-15aa5f04ac76","_cell_guid":"24e0f59e-a39b-4281-9133-e70b3b0a5fab","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T20:46:33.693361Z","iopub.execute_input":"2025-06-13T20:46:33.693852Z","iopub.status.idle":"2025-06-13T20:46:34.120393Z","shell.execute_reply.started":"2025-06-13T20:46:33.693823Z","shell.execute_reply":"2025-06-13T20:46:34.119347Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"y = data.diagnosis.values\nx_data = data.drop([\"diagnosis\"], axis=1)","metadata":{"_uuid":"85b47fd0-1bb3-497f-bdae-397c73cbe5df","_cell_guid":"5b4bb484-a4d6-4b00-a56e-2c6144f95bc0","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T20:46:34.121691Z","iopub.execute_input":"2025-06-13T20:46:34.122027Z","iopub.status.idle":"2025-06-13T20:46:34.127744Z","shell.execute_reply.started":"2025-06-13T20:46:34.121993Z","shell.execute_reply":"2025-06-13T20:46:34.126712Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# **Normalising the Data**","metadata":{"_uuid":"736e405f-c7f9-4a72-a5c4-1cdcaaf1da8c","_cell_guid":"bedd2817-3a8d-44d0-a78b-31ce807c95d9","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"x = (x_data - x_data.min()) / (x_data.max() - x_data.min())","metadata":{"_uuid":"a921e8fe-6ad5-487e-b8fc-78118c55efb0","_cell_guid":"33480fc9-a4b3-4f56-8ac0-02ea82b43c2c","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T20:46:34.129089Z","iopub.execute_input":"2025-06-13T20:46:34.129406Z","iopub.status.idle":"2025-06-13T20:46:34.161428Z","shell.execute_reply.started":"2025-06-13T20:46:34.129356Z","shell.execute_reply":"2025-06-13T20:46:34.160100Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data.describe().T","metadata":{"_uuid":"3f82fe2b-3990-4c85-bd1b-a926d5e292e1","_cell_guid":"bc6b820c-cbef-4edf-9f96-74af11a46223","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T20:46:34.162516Z","iopub.execute_input":"2025-06-13T20:46:34.162788Z","iopub.status.idle":"2025-06-13T20:46:34.225618Z","shell.execute_reply.started":"2025-06-13T20:46:34.162768Z","shell.execute_reply":"2025-06-13T20:46:34.224748Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Import plotting modules\nfrom plotly import tools\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot \nimport plotly.offline as py\nfrom plotly.graph_objs import Scatter, Layout \npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff","metadata":{"_uuid":"663e5648-c5aa-463e-a0b2-0a540fb23b2c","_cell_guid":"b28720af-67c6-4f9f-b259-dd9e04dc28b2","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T20:46:34.227038Z","iopub.execute_input":"2025-06-13T20:46:34.227329Z","iopub.status.idle":"2025-06-13T20:46:36.814094Z","shell.execute_reply.started":"2025-06-13T20:46:34.227309Z","shell.execute_reply":"2025-06-13T20:46:36.813111Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"p = data.describe().T \np = p.round(4) \ntable = go.Table(\n    columnwidth=[0.8]+[0.5]*8, \n    header=dict(\n        values=['Attribute'] + list(p.columns), line = dict(color='#506784'),\n        fill = dict(color='lightblue'),\n), \n    cells=dict(\n        values=[p.index] + [p[k].tolist() for k in p.columns[:]], line = dict(color='#506784'),\n        fill = dict(color=['rgb(173, 216, 220)', '#f5f5fa'])\n) )","metadata":{"_uuid":"85a7613b-845e-4ae2-8989-a8034f7956c3","_cell_guid":"70ce0fb0-c7d7-4c55-ae39-4e5e1aef4524","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T20:59:11.826450Z","iopub.execute_input":"2025-06-13T20:59:11.826770Z","iopub.status.idle":"2025-06-13T20:59:11.882253Z","shell.execute_reply.started":"2025-06-13T20:59:11.826747Z","shell.execute_reply":"2025-06-13T20:59:11.881424Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"B, M = data['diagnosis'].value_counts()      # unpack the two counts\ns = [B, M]\n\nprint(data['diagnosis'].value_counts())      # use the same variable name\n\nwith plt.style.context('dark_background'):\n    plt.figure(figsize=(6, 4))\n    plt.bar([0, 1], s, align='center', label='Count')\n    plt.xticks([0, 1], ['Benign', 'Malignant'])  # optional: nicer x-labels\n    plt.ylabel('')\n    plt.xlabel('')\n    plt.legend(loc='best')\n    plt.tight_layout()","metadata":{"_uuid":"831f997f-533a-47a3-b5b5-8c7a5fd085bc","_cell_guid":"d0f7ffe4-5b75-4e30-af73-bcd9210f75a5","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T20:59:13.965189Z","iopub.execute_input":"2025-06-13T20:59:13.965545Z","iopub.status.idle":"2025-06-13T20:59:14.143114Z","shell.execute_reply.started":"2025-06-13T20:59:13.965508Z","shell.execute_reply":"2025-06-13T20:59:14.142174Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"B, M = data['diagnosis'].value_counts()\ntrace1 = go.Bar(y = (M, B), x = ['malignant', 'benign'],opacity = 0.8)\ntrace2 = go.Pie(labels = ['Benign','Malignant'], values = data['diagnosis'].value_counts(), textfont=dict(size=15), opacity = 0.8)","metadata":{"_uuid":"32264d32-04db-4ce6-b0fe-485535d1d998","_cell_guid":"2a6cdc44-6b88-40ed-98b8-4e8e85b532c1","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T20:59:24.745764Z","iopub.execute_input":"2025-06-13T20:59:24.746144Z","iopub.status.idle":"2025-06-13T20:59:24.753536Z","shell.execute_reply.started":"2025-06-13T20:59:24.746119Z","shell.execute_reply":"2025-06-13T20:59:24.752471Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"mean_col = [col for col in data.columns if col.endswith('_mean')] \nfor i in range(len(mean_col)):\n    sns.FacetGrid(data,hue=\"diagnosis\",aspect=3,margin_titles=True).map(sns.kdeplot,mean_col[i],shade= True).add_legend()","metadata":{"_uuid":"b2826f45-4f02-4e16-af16-e027a8d90528","_cell_guid":"26c6aef4-2336-4b1e-954f-9c7ca7dc8319","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T20:59:57.038020Z","iopub.execute_input":"2025-06-13T20:59:57.038785Z","iopub.status.idle":"2025-06-13T21:00:01.419155Z","shell.execute_reply.started":"2025-06-13T20:59:57.038755Z","shell.execute_reply":"2025-06-13T21:00:01.418074Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Correlation Map\nf,ax = plt.subplots(figsize=(18, 18))\ncmap = sns.diverging_palette( 240 , 10 , as_cmap = True ) \nsns.heatmap(data.corr(), cmap='Blues',annot=True, linewidths=.5, fmt= '.1f',ax=ax) \nplt.xticks(fontsize=11,rotation=70)\nplt.show()","metadata":{"_uuid":"571ab59c-6e34-40b7-8bd9-8e20fed982b0","_cell_guid":"88108e87-b733-4c97-8099-1dd2eeb08a9e","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T21:00:22.203643Z","iopub.execute_input":"2025-06-13T21:00:22.204014Z","iopub.status.idle":"2025-06-13T21:00:24.432356Z","shell.execute_reply.started":"2025-06-13T21:00:22.203992Z","shell.execute_reply":"2025-06-13T21:00:24.431291Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from pylab import rcParams \nrcParams['figure.figsize'] = 8,5\n\ncols = ['radius_mean', 'texture_mean', 'perimeter_mean',\n'area_mean', 'smoothness_mean', 'compactness_mean', 'concavity_mean', 'concave points_mean', 'symmetry_mean','diagnosis']\nsns_plot = sns.pairplot(data=data[cols],hue='diagnosis')","metadata":{"_uuid":"1754256b-d158-4362-b7c7-f1102917ac75","_cell_guid":"99b6a8da-4fc1-4573-a8a1-990d98a2b115","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T21:00:37.558162Z","iopub.execute_input":"2025-06-13T21:00:37.558516Z","iopub.status.idle":"2025-06-13T21:01:06.684987Z","shell.execute_reply.started":"2025-06-13T21:00:37.558490Z","shell.execute_reply":"2025-06-13T21:01:06.683970Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# **Splitting the data into train and test sets**","metadata":{"_uuid":"10889985-fbca-4982-a1cc-c45d597804e7","_cell_guid":"0875e3cf-00db-4370-a83f-9f5079915ee9","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"# X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.30, random_state=42) #30% of data is kept for testing\n\n# Shuffle the dataset \n# shuffle_df = shuffle(data)\n# np.random.shuffle(shuffle_df.values)\n\nshuffle_df = data.sample(frac=1)\n\n# Define a size for the train set \ntrain_size = int(0.8 * len(data))\n\n# Splitting the dataset \ntrain_set = shuffle_df[:train_size]\ntest_set = shuffle_df[train_size:]\n\ny_train = train_set.diagnosis.values\nX_train = train_set.drop([\"diagnosis\"], axis=1)\ny_test  = test_set.diagnosis.values\nX_test  = test_set.drop([\"diagnosis\"], axis=1)","metadata":{"_uuid":"5685bd2b-2264-4cd5-85c9-58bdbd42555a","_cell_guid":"651e70a7-a5cb-40e8-9e38-9400cb90a0f5","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T21:02:14.516163Z","iopub.execute_input":"2025-06-13T21:02:14.516523Z","iopub.status.idle":"2025-06-13T21:02:14.526519Z","shell.execute_reply.started":"2025-06-13T21:02:14.516496Z","shell.execute_reply":"2025-06-13T21:02:14.525269Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# **Building K-Nearest Neighbours for Classification without Sklearn Modules**","metadata":{"_uuid":"f6fe9890-6e31-4e17-a1cf-089d95e0b2dd","_cell_guid":"2d5ef918-b389-4c51-a570-3bef53aea617","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"class KNN:\n    def __init__(self, k):\n        self.k = k\n        \n    #Fit function to keep the data with itself, since KNN does not perform any explicit training process.   \n    def fit(self, X, y):\n        self.X_train = X\n        self.y_train = y\n        \n        \n     #It calculate the Euclidean distance and returns how similar two examples are  \n    def distance(self, X1, X2):\n        distance = scipy.spatial.distance.euclidean(X1, X2)\n        \n        \n    # In predict function, it predicts the class for testing instance using the complete training data.\n    #  1- First it calculates the distance between a test data point and every training data point,\n    #  2- It sorts the distances and picks K nearest distances(first K entries) from it.\n    #  3- Gets the labels of the selected K neighbors. The most common label(label with a majority vote) will be the\n    #     predicted label for our test data point.\n    def predict(self, X_test):\n        final_output = []\n        for i in range(len(X_test)):\n            d = []\n            votes = []\n            for j in range(len(self.X_train)):\n                dist = scipy.spatial.distance.euclidean(self.X_train[j] , X_test[i])\n                d.append([dist, j])\n            d.sort()\n            d = d[0:self.k]\n            for d, j in d:\n                votes.append(self.y_train[j])\n            ans = Counter(votes).most_common(1)[0][0]\n            final_output.append(ans)\n            \n        return final_output\n    \n    # It calculate the score for our model based on the test data\n    def score(self, X_test, y_test):\n        predictions = self.predict(X_test)\n        return (predictions == y_test).sum() / len(y_test)","metadata":{"_uuid":"cdbb1e24-0ebe-4b9e-9acf-60d407e403a9","_cell_guid":"aa51dae8-d807-449a-9e41-bf04eb65068f","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T21:02:48.140458Z","iopub.execute_input":"2025-06-13T21:02:48.140776Z","iopub.status.idle":"2025-06-13T21:02:48.149163Z","shell.execute_reply.started":"2025-06-13T21:02:48.140754Z","shell.execute_reply":"2025-06-13T21:02:48.148103Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Store neighbours and errors in an empty list\nneighbours = []\nerrors = []","metadata":{"_uuid":"bd344c05-cbb4-4e23-9392-b0fc7d07d646","_cell_guid":"222f176f-fce0-4a52-b943-df85812950b4","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T21:02:58.380947Z","iopub.execute_input":"2025-06-13T21:02:58.381280Z","iopub.status.idle":"2025-06-13T21:02:58.386348Z","shell.execute_reply.started":"2025-06-13T21:02:58.381255Z","shell.execute_reply":"2025-06-13T21:02:58.385220Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"for k in range(1,30, 2):\n    neighbours.append(k)\n    clf = KNN(k)\n    clf.fit(X_train.to_numpy(), y_train)\n    score = clf.score(X_test.to_numpy(), y_test)\n    errors.append(1-score)\n    print(\"Number of neighbours : \",k,\", Accuracy = \",score)","metadata":{"_uuid":"cfdbe745-fb2e-4b6a-9bbd-84c03ef7d3a7","_cell_guid":"ae055e5d-e4d1-45f3-a5e3-9d8071455060","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T21:03:06.367020Z","iopub.execute_input":"2025-06-13T21:03:06.367334Z","iopub.status.idle":"2025-06-13T21:03:12.505413Z","shell.execute_reply.started":"2025-06-13T21:03:06.367313Z","shell.execute_reply":"2025-06-13T21:03:12.504545Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"clf = KNN(9)\nclf.fit(X_train.to_numpy(), y_train)\nscore = clf.score(X_test.to_numpy(), y_test)\nprint(\"Accuracy of KNN = \",score)","metadata":{"_uuid":"53106dd0-9515-464d-9856-b076272cff5b","_cell_guid":"670debbb-a553-4344-ae09-183f55a0f9e2","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T21:03:24.447567Z","iopub.execute_input":"2025-06-13T21:03:24.447918Z","iopub.status.idle":"2025-06-13T21:03:24.860112Z","shell.execute_reply.started":"2025-06-13T21:03:24.447896Z","shell.execute_reply":"2025-06-13T21:03:24.859348Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Choosing the value of K which gave the least error\nMSE = [x for x in errors]\noptimal_k = neighbours[MSE.index(min(MSE))]\nprint(\"Optimal K value is: \"+str(optimal_k))\nprint(\"Accuracy at K=\"+str(optimal_k)+\" is: \"+str(1-float(MSE[optimal_k])))","metadata":{"_uuid":"9de32146-da30-4029-8649-8368cfc16eab","_cell_guid":"d4656ebb-cc88-478f-8cbc-831a06c1df5c","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T21:03:36.252702Z","iopub.execute_input":"2025-06-13T21:03:36.252996Z","iopub.status.idle":"2025-06-13T21:03:36.259000Z","shell.execute_reply.started":"2025-06-13T21:03:36.252977Z","shell.execute_reply":"2025-06-13T21:03:36.257961Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Plotting the error values against K values\nplt.figure(figsize=(10, 6))\nplt.plot(neighbours, MSE)\nplt.xlabel('K value --->')\nplt.ylabel('Error  --->')\nplt.show()","metadata":{"_uuid":"74fac102-afcf-4461-ae93-65ebb70746d3","_cell_guid":"2f1fa5a6-9ea4-4211-94a8-f81c93620551","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T21:03:46.132929Z","iopub.execute_input":"2025-06-13T21:03:46.133245Z","iopub.status.idle":"2025-06-13T21:03:46.310957Z","shell.execute_reply.started":"2025-06-13T21:03:46.133223Z","shell.execute_reply":"2025-06-13T21:03:46.309993Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"%%writefile app.py\nimport streamlit as st, joblib, numpy as np\nfrom pathlib import Path\n\n# ---------- constants ----------\nMODEL_PATH = Path(\"breast_cancer_clf.pkl\")   # put your model here\nTEST_ACCURACY = 0.971                        # update with your own score\n\n# ---------- load model ----------\n@st.cache_resource\ndef load_model(path: Path):\n    if not path.exists():\n        st.error(f\"❌ Model file not found: {path.resolve()}\")\n        st.stop()\n    return joblib.load(path)\n\nmodel = load_model(MODEL_PATH)\n\n# ---------- UI ----------\nst.set_page_config(page_title=\"Breast-Tumor Classifier\", page_icon=\"🩺\")\nst.title(\"Breast-tumor classifier\")\nst.caption(f\"Hold-out test accuracy: **{TEST_ACCURACY:.1%}**\")\n\nst.markdown(\"Enter feature measurements below (values from the Wisconsin Diagnostic dataset).\")\n\n# For brevity only a few inputs are shown—repeat for all features you want:\nradius_mean  = st.number_input(\"Mean radius (mm)\",  0.0,  50.0, step=0.01)\ntexture_mean = st.number_input(\"Mean texture\",      0.0, 100.0, step=0.01)\nperimeter_mean = st.number_input(\"Mean perimeter\",  0.0, 300.0, step=0.01)\narea_mean    = st.number_input(\"Mean area\",         0.0, 2500.0, step=1.0)\n\nif st.button(\"Classify\"):\n    # assemble feature vector in the order the model expects\n    X = np.array([[radius_mean, texture_mean, perimeter_mean, area_mean]])\n    prob_malignant = model.predict_proba(X)[0, 1]\n    label = \"Malignant\" if prob_malignant >= 0.50 else \"Benign\"\n\n    st.success(f\"**{label}**  (Probability malignant: {prob_malignant:.1%})\")\n    st.caption(\"_For research use only – not a diagnostic device._\")","metadata":{"_uuid":"01ef7a39-cd8c-431a-82a8-af5627c684b9","_cell_guid":"b33b2886-fefd-42f5-8f33-c210f11e7e60","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-06-13T21:12:33.382566Z","iopub.execute_input":"2025-06-13T21:12:33.382916Z","iopub.status.idle":"2025-06-13T21:12:33.391360Z","shell.execute_reply.started":"2025-06-13T21:12:33.382887Z","shell.execute_reply":"2025-06-13T21:12:33.390353Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null}]}